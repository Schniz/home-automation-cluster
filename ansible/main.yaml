---
- name: Set up main host
  hosts: all
  become: false
  vars:
    working_directory: "{{ lookup('env', 'PWD') }}"
    gpg_private_key: "{{ lookup('env', 'PGP_PRIVATE_KEY') }}"
    runner_user: schniz
    runner_labels: [home, linux]
    github_account: Schniz
    github_repo: home-automation-cluster
  tasks:
    - name: Add Docker GPG apt Key
      become: true
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker Repository
      become: true
      apt_repository:
        repo: deb https://download.docker.com/linux/ubuntu focal stable
        state: present

    - name: install deps
      become: true
      apt:
        name:
          - gnupg
          - git
          - git-secret
          - docker-ce
          - docker-compose-plugin
        state: latest

    - name: Set up Docker log rotation
      become: true
      lineinfile:
        path: /etc/docker/daemon.json
        line: '{"log-driver":"json-file","log-opts":{"max-size":"10m","max-file":"2"}}'
        create: true
      notify:
        - reload docker

    - name: Import gpg private key
      when: gpg_private_key != ""
      command: gpg --batch --yes --pinentry-mode loopback --import
      args:
        chdir: "{{ working_directory }}"
        stdin: "{{ gpg_private_key }}"

    # sudo groupadd docker
    - name: Create "docker" group
      become: true
      group:
        name: "docker"
        state: present

    # sudo usermod -aG docker root
    - name: Add "{{runner_user}}" user to "docker" group
      become: true
      user:
        name: "{{runner_user}}"
        groups:
          - "docker"
        append: yes

    - name: create the "caddy" network in docker
      become: true
      community.docker.docker_network:
        name: caddy
        state: present

  roles:
    - role: monolithprojects.github_actions_runner
      become: true
      when: lookup('env', 'PERSONAL_ACCESS_TOKEN') != ""

  handlers:
    - name: reload docker
      become: true
      service:
        name: docker
        state: reloaded
