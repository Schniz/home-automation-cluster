---

# {{ $namespace := "radarr" }}
# {{- $subdomain := .Values.apps.radarr.subdomain -}}
# {{- $domain := print $subdomain "." .Values.ingress.base_domain -}}

---

apiVersion: v1
kind: Namespace
metadata:
  name: {{ $namespace }}

---

apiVersion: v1
kind: PersistentVolume
metadata:
  name: "radarr-library-storage"
  labels:
    type: "local"
    hagever.com/for: radarr
spec:
  storageClassName: manual
  capacity:
    storage: "500Gi"
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "{{ .Values.external_storage.base }}/library"

---

apiVersion: v1
kind: PersistentVolume
metadata:
  name: "radarr-config-storage"
  labels:
    type: "local"
    hagever.com/for: radarr
spec:
  storageClassName: manual
  capacity:
    storage: "1Gi"
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "{{ .Values.external_storage.base }}/configs/radarr"

---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  namespace: {{ $namespace }}
  name: "radarr-config-storage"
spec:
  storageClassName: manual
  selector:
    matchLabels:
      hagever.com/for: radarr
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: "1Gi"

---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  namespace: {{ $namespace }}
  name: "radarr-library-storage"
spec:
  storageClassName: manual
  selector:
    matchLabels:
      hagever.com/for: radarr
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: "500Gi"

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $namespace }}
  namespace: {{ $namespace }}
  labels:
    app: {{ $namespace }}
    hagever.com/version: '1'
spec:
  replicas: 1
  selector:
    matchLabels: 
      app: {{ $namespace }}
  template:
    metadata:
      labels:
        app: {{ $namespace }}
    spec:
      volumes:
        - name: radarr-library-storage
          persistentVolumeClaim:
            claimName: radarr-library-storage
        - name: radarr-config-storage
          persistentVolumeClaim:
            claimName: radarr-config-storage
      containers:
        - name: server
          image: linuxserver/radarr:latest
          imagePullPolicy: Always
          ports:
            - name: web-ui
              containerPort: 7878
          volumeMounts:
            - mountPath: /movies
              name: radarr-library-storage
              subPath: movies
            - mountPath: /config
              name: radarr-config-storage
            - mountPath: /downloads
              name: radarr-library-storage
              subPath: downloads
          env:
            - name: PUID
              value: "1000"
            - name: PGID
              value: "1000"
            - name: TZ
              value: Asia/Jerusalem
          # TODO: understand why it does not work
          # livenessProbe:
          #   httpGet:
          #     path: /
          #     port: 7878
          #   initialDelaySeconds: 3
          #   periodSeconds: 3

---

apiVersion: v1
kind: Service
metadata:
  name: {{ $namespace }}
  namespace: {{ $namespace }}
  labels:
    app: {{ $namespace }}
spec:
  selector:
    app: {{ $namespace }}
  ports:
    - protocol: TCP
      targetPort: 7878
      port: 80
      name: web-ui

---

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: {{ $namespace }}
  namespace: {{ $namespace }}
spec:
  tls:
    - hosts:
        - {{ $domain | quote }}
  rules:
  - host: {{ $domain | quote }}
    http:
      paths:
      - backend:
          service:
            name: {{ $namespace }}
            port:
              number: 80
        path: /
        pathType: Prefix
