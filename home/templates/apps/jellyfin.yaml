---

# {{ $namespace := "jellyfin" }}
# {{- $subdomain := .Values.apps.jellyfin.subdomain -}}
# {{- $domain := print $subdomain "." .Values.ingress.base_domain -}}

---

apiVersion: v1
kind: Namespace
metadata:
  name: {{ $namespace }}

---

apiVersion: v1
kind: PersistentVolume
metadata:
  name: "jellyfin-library-storage"
  namespace: {{ $namespace }}
  labels:
    hagever.com/for: jellyfin
    type: "local"
spec:
  storageClassName: manual
  capacity:
    storage: "500Gi"
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "{{ .Values.external_storage.base }}/library"

---

apiVersion: v1
kind: PersistentVolume
metadata:
  name: "jellyfin-config-storage"
  namespace: {{ $namespace }}
  labels:
    type: "local"
    hagever.com/for: jellyfin
spec:
  storageClassName: manual
  capacity:
    storage: "1Gi"
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "{{ .Values.external_storage.base }}/configs/jellyfin"

---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  namespace: {{ $namespace }}
  name: "jellyfin-config-storage"
spec:
  storageClassName: manual
  selector:
    matchLabels:
      hagever.com/for: jellyfin
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: "1Gi"

---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  namespace: {{ $namespace }}
  name: "jellyfin-library-storage"
spec:
  storageClassName: manual
  selector:
    matchLabels:
      hagever.com/for: jellyfin
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: "500Gi"

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $namespace }}
  namespace: {{ $namespace }}
  labels:
    app: {{ $namespace }}
    hagever.com/version: '1'
spec:
  replicas: 1
  selector:
    matchLabels: 
      app: {{ $namespace }}
  template:
    metadata:
      labels:
        app: {{ $namespace }}
    spec:
      volumes:
        - name: jellyfin-library-storage
          persistentVolumeClaim:
            claimName: jellyfin-library-storage
        - name: jellyfin-config-storage
          persistentVolumeClaim:
            claimName: jellyfin-config-storage
      containers:
        - name: server
          image: linuxserver/jellyfin:latest
          imagePullPolicy: Always
          livenessProbe:
            tcpSocket:
              port: 8096
            initialDelaySeconds: 30
            periodSeconds: 5
          name: jellyfin
          ports:
            - name: web-ui
              containerPort: 8096
            - name: discovery
              containerPort: 7359
              protocol: UDP
            - name: dlna
              containerPort: 1900
              protocol: UDP
          volumeMounts:
          - mountPath: /config
            name: jellyfin-config-storage
          - mountPath: /data/tvshows
            name: jellyfin-library-storage
            subPath: tv
          - mountPath: /data/movies
            name: jellyfin-library-storage
            subPath: movies
          env:
            - name: PUID
              value: "1000"
            - name: PGID
              value: "1000"
            - name: TZ
              value: Asia/Jerusalem
# version: "2.1"
# services:
#   jellyfin:
#     image: lscr.io/linuxserver/jellyfin
#     container_name: jellyfin
#     environment:
#       - PUID=1000
#       - PGID=1000
#       - TZ=Europe/London
#       - JELLYFIN_PublishedServerUrl=192.168.0.5 #optional
#     volumes:
#       - /path/to/library:/config
#       - /path/to/tvseries:/data/tvshows
#       - /path/to/movies:/data/movies
#       - /opt/vc/lib:/opt/vc/lib #optional
#     ports:
#       - 8096:8096
#       - 8920:8920 #optional
#       - 7359:7359/udp #optional
#       - 1900:1900/udp #optional
#     devices:
#       - /dev/dri:/dev/dri #optional
#       - /dev/vcsm:/dev/vcsm #optional
#       - /dev/vchiq:/dev/vchiq #optional
#       - /dev/video10:/dev/video10 #optional
#       - /dev/video11:/dev/video11 #optional
#       - /dev/video12:/dev/video12 #optional
#     restart: unless-stopped


---

apiVersion: v1
kind: Service
metadata:
  name: {{ $namespace }}
  namespace: {{ $namespace }}
  labels:
    app: {{ $namespace }}
spec:
  selector:
    app: {{ $namespace }}
  ports:
    - name: web-ui
      targetPort: 8096
      port: 80
      protocol: TCP
    - name: discovery
      port: 7359
      protocol: UDP
    - name: dlna
      port: 1900
      protocol: UDP

---

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: {{ $namespace }}
  namespace: {{ $namespace }}
spec:
  tls:
    - hosts:
        - {{ $domain | quote }}
  rules:
  - host: {{ $domain | quote }}
    http:
      paths:
      - backend:
          service:
            name: {{ $namespace }}
            port:
              number: 80
        path: /
        pathType: Prefix
